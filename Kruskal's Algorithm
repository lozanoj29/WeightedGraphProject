#Importing the code from the file text.txt
#Full path on my laptop: 'C:\\Users\\lykha\\Desktop\\MST\\Text.txt'     
with open('Text.txt') as f:
    lines = [line.rstrip('\n') for line in f]
class Graph:    
    def __init__(self,vertices):
        self.V= vertices      
        self.graph = [] 
               ###Torn apart   
    def addEdge(self,u,v,w):       
        self.graph.append([u,v,w])        
        #Connect them    
    def find(self, parent, i):     
        if parent[i] == i:           
              return i      
       return self.find(parent, parent[i])
       
    def union(self, parent, rank, x, y):      
        xroot = self.find(parent, x)       
        yroot = self.find(parent, y)
        
        if rank[xroot] < rank[yroot]:       
             parent[xroot] = yroot      
        elif rank[xroot] > rank[yroot]:          
             parent[yroot] = xroot
             
        else :           
            parent[yroot] = xroot          
            rank[xroot] += 1
    def Kruskals(self, cost = False):     
        result =[]     
        i = 0     
        e = 0     
     self.graph = sorted(self.graph,key=lambda item: item[2])    
     parent = [] ; rank = []     
     for node in range(self.V):      
         parent.append(node)       
         rank.append(0)     
     while e < self.V -1 :        
         u,v,w = self.graph[i]        
         i = i + 1          
         x = self.find(parent, u)      
         y = self.find(parent ,v)         
        if x != y:              
             e = e + 1              
             result.append([u,v,w])              
             self.union(parent, rank, x, y)       
     if cost == True:          
         for u,v,weight in result:          
            print("V%d - V%d: Weight = %d" % (u,v,weight))      
     else:         
         for u,v, weight in result:             
             print("V%d - V%d" % (u,v))
     
